{"posts":[{"title":"Git笔记","text":"版本控制​ 版本控制(Revision control)是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复之前的版本的软件工程技术。同时也便于管理多人协同开发项目。 主流的版本控制器便是Git 集中版本控制 SVN ​ 所有的版本数据都保存在中央服务器上，协同开发者从服务器上同步更新或上传自己的修改。 ​ 用户的本地只有自己以前所同步的版本，如果不连网的话，用户就无法看到历史版本，也无法切换版本来验证问题。而且所有数据都保持在单一的服务器上，一旦服务器损坏，将会丢失所有的数据。 分布式版本控制 Git ​ 所有版本信息仓库会全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户哪里。由于每个用户保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。 ​ 每个人都拥有全部的代码，不会因为服务器损坏或者网络问题造成不能工作的情况。 ​ 如果甲在电脑上改了文件A，乙也在电脑上改了文件A，此时，甲乙之间只需把各自的修改推送给对方，就可以相互看到对方的修改。 基本的Linux命令 cd xx进入当前目录下的xx目录 cd ..回退到上一个目录，直接cd进入默认目录 pwd显示当前所在的目录路径 ls(ll)列出当前目录中的所有文件，ll列出的内容更为详细 touch新建一个文件 如touch index.html 就会在当前目录下新建一个index.html文件 rm删除一个文件 如rm index.html就会把当前目录下的index.html删除 mkdir新建一个目录 如mkdir index就会在当前目录下新建一个index文件夹 rm -r删除一个文件夹 如rm -r src 删除当前目录下的src文件夹 mv移动文件，mv 源文件或目录 目标文件或目录 reset重新初始化终端/清平 clear清屏 history查看命令历史 exit退出 #表示注释 Git工作机制Git本地有三个区域：工作区(Workspace)、暂存区(Index\\Stage)、本地仓库(Repository)。另外还有一个远程库(Remote Directory)。 工作区：存放项目代码的地方 暂存区：用于临时存放改动，事实上它只是一个文件，保存即将提交的文件列表信息。需要将工作区的内容添加到暂存区 本地库：安全存放数据的位置，用于存放项目的历史版本。需要将暂存区的内容提交到本地库 远程库：代码托管中心。互联网中有GitHub、Gitee；局域网中有GitLab Git常用命令​ 命令名称 作用 git config –global user.name 用户名 设置用户标识 git config –global user.email 邮箱 设置用户标识 git init 初始化本地库 git status 查看本地库状态 git add 文件名 添加到暂存区 git commit -m “日志信息” 文件名 提交到本地库 git reflog 查看历史版本 git reset –hard 版本号 版本穿梭 设置用户名与邮箱(用户标识)首次安装必须先配置用户标识/系统标识，用于确定当前使用者的身份。Git每次提交都会使用该信息。 12git config --global user.name test #用户名git config --global user.email test@xxx.com #邮箱 ​ 设置–global选项后，Git将总会使用该信息来处理用户在系统中所做的一切操作。如果希望在一个特定中的项目中使用不同的用户名或email，在该项目下运行该命令并且去掉–global选项。 查看相关配置内容 12345#查看系统configgit config -system --list#查看当前用户(global)配置git config --global --list ​ 配置文件都是保存在本地计算机中的，因此可以到相关路径下查看。 Git\\etc\\gitconfig: –system 系统级 C:\\Users'user name’.gitconfig: 当前登录用户的配置 –global 全局 一般流程 要想让Git管理项目，先要初始化本地库。 1git init 在项目路径下生成 .git 隐藏文件夹。 当我们代码编写完成之后，需要先添加到暂存区。 1git add test.txt 接着将暂存区的代码提交到本地库。 1git commit -m &quot;first commit&quot; test.txt 当下一次在本地库修改代码后，重复上述操作。 为了知道每个版本，可以查看历史版本。 1git reflog 更详细地查看(每个版本都是谁提交的，什么时间提交的) 1git log 如果当前版本不理想，可以进行版本穿梭 1git reset --hard 版本号 此时工作区内的文件回溯到该版本。 版本切换的底层原理如图所示。 Git分支什么是分支在版本控制过程中，同时推进多个任务，为每个任务，我们可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离出来，开发自己分支的时候，不会影响主线分支的运行。 分支的好处同时并行推进多个功能开发，提高开发效率。 各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。 分支的操作 命令名称 作用 git branch 分支名 创建分支 git branch -v 查看分支 git checkout/switch 分支名 切换分支 git merge 分支名 把指定的分支合并到当前分支上 查看分支1git branch -v 创建分支1git branch 分支名 此时刚创建的分支会将主分支master的内容复制一份 切换分支1git checkout/switch 分支名 之后的操作与一般流程相同(不用再初始化本地库)。 切换分支的本质仍是HEAD指针的指向不同。 合并分支1git merge 分支名 需要切换回master分支，将hot-fix分支合并到主分支。 此时工作区的文件内容会变成hot-fix分支下对应的文件内容。 产生冲突合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的需改。Git无法替我们决定使用哪一个。必须人为决定新代码内容。","link":"/2023/01/01/Git-note/"},{"title":"FPGA实现sobel变换","text":"什么是卷积在FPGA中要完成卷积操作，关键是一个时钟周期要具备图像矩阵和卷积核kernel 如何获得图像矩阵图像数据来源： CMOS摄像头：OV5640、OV7725等系列 仿真时的一副图像：ROM存储 上述都有一个共同特点，获得的数据是串行的。一个时钟周期读取一个像素点。无法满足图像矩阵中的特点(3×3)。 通过延迟解决 如何延迟？ 人为地打拍 图像为大尺寸时非常麻烦 shift ram (shift register) （IP核：Intel和Xilinx） 两个参数： depth 矩阵每一列数值大小 width 数值位宽 Altera只需要例化一个IP核 Xilinx需要例化多个IP值 但即使是这样，一个时钟也只有3个图像数据，仍然不满足图像矩阵 使用拼接操作直接保存一行的数据 Sobel算子 实际在FPGA中，并没有用算子和图像矩阵相乘，而是图像矩阵自身计算左右两列之和，比大小并相减。 乘2这个操作直接用左移一位实现 由于卷积操作之后图像尺寸会变小，因此需要进行padding填充","link":"/2023/01/03/fpga-1/"},{"title":"Hexo的安装和部署","text":"​ Hexo是一个简洁高效的博客框架，可以使用markdown或其他渲染引擎解析文章并生成静态网页。在看过UP主CodeSheep的教学视频后发现还是存在一些视频中不曾出现的问题。因此结合Hexo官方文档，决定出一个小白都能够看懂的原装Win10安装和部署Hexo的过程。 Hexo安装与使用​ 由于Hexo需要JavaScript运行环境和从GitHub上克隆，因此首先需要安装Node.js和Git。 Node.js安装​ 来到Node.js官网，选择下载LTS稳定版本。根据自己的系统选择对应的安装包，这里演示的系统是Windows10系统，64位。 Git安装​ 来到Git官网，选择Window下载，这里同样找到自己操作系统对应的操作。 如果下载速度过慢或无法下载，可以用国内的镜像选择最新版本进行下载。安装过程一路Next即可。 ​ 安装完成后，在桌面右键点击Git Bash Here，打开界面如下。 ​ 在这里需要设置用户标识，即你的用户名称和邮箱地址。输入以下代码设置为全局标识。 12git config --global user.name &quot;your name&quot;git config --global user.eamail &quot;your email&quot; ​ 这里的用户名称和邮箱地址与之后部署到GitHub时的信息不一定相同，当然建议设置成相同的。 Hexo安装​ 首先建立一个存放博客的文件夹如Blog。打开命令行窗口并将其切换到Blog目录下，执行以下代码。 1npm install -g hexo-cli ​ 看到如下结果说明安装成功。 ​ 接着继续执行以下代码。 12hexo initnpm install ​ 得到如下运行结果则说明已经成功安装Hexo。 Hexo本地访问​ 在成功安装Hexo之后，我们就可以先在本地访问自己的博客网站了。首先还是在原来的命令行窗口执行以下代码。 1npm install hexo-server --save ​ 得到以下结果说明服务器模块安装成功。 ​ 安装完成之后，输入以下命令便可以启动服务器并进行访问。 1hexo server #或者hexo s ​ 得到以下结果说明服务器开启成功。 ​ 在浏览器中输入红框标出的内容即可实现本地访问。 部署GitHub注册与创建仓库​ 为了能够让互联网中的其他用户都能访问我们的博客，因此我们需要将Hexo部署到远端服务器中。这里首先演示如何部署到GitHub中。 ​ 来到GitHub官网进行账号注册，在上面已经提到，这里的邮箱和用户名与配置Git时的信息并不相同。 ​ 注册完成后，进行仓库建设。点击+, New repository。 ​ 在Repository name仓库名称中填入GitHub的用户名 + ‘GitHub.io’。比如演示的这里是’test2hexo.GitHub.io’。其他设置选项默认不变，最后点击Create repository创建仓库。 ​ 创建完成之后，会跳转到如下的界面，复制HTTPS地址内容之后会用到。 获取Personal access tokens​ 由于2021年8月13日后GitHub Push代码需要token令牌登录，不再是原来的账号密码登录。因此需要获取该令牌。 ​ 点击头像下的Setting设置选项。 ​ 下拉页面找到Developer setting开发者设置选项。 ​ 点击Personal access tokens中的Tokens(classic)，选择Generate a personal access token。 ​ Expiration到期时间选择一个适合自己的即可，勾选repo的全部选项。 ​ 点击Generate token生成令牌。由于令牌之后无法查看，妥善保存自己的令牌。 推送博客内容打开博客所在的文件夹Blog中的*_congfig.yml文件，在最后Deployment中输入以下内容。其中repo对应的就是刚才复制的HTTPS地址。*注意冒号:后面需要空格。 ​ ​ 在Blog文件夹目录下右键打开Git Bash，输入以下代码完成博客公开内容的生成。 1hexo generate #或者hexo g ​ 得到如下运行结果。 ​ 接着输入以下命令完成博客内容推送至GitHub。 12npm install hexo-deployer-git --savehexo d ​ 得到的运行过程分别如下。 ​ 输入GitHub账号的用户名。并非之前设置Git时的用户名。 ​ 输入之前获取的Personal access tokens。最终的运行结果如图。 ​ 至此，博客内容已经成功推送到GitHub上。在浏览器中输入仓库名称，这里演示的是test2hexo.github.io，便能访问博客。 ​ 若想更新博客内容，只需输入 hexo g 及 hexo d 即可。 部署服务器*​ 由于在国内连接GitHub并不是十分稳定，时常存在打不开的现象。当然我们可以把博客部署到国内的码云实现稳定快速地访问。不过最酷的方式应该还是拥有一个个性化的网址。区别于部署到Github上的网址test2hexo.github.io，这可以直接通过test2hexo.com或test2hexo.cn等类似的网址访问自己的博客。 ​ 此内容步骤较为繁琐且需要付出一定的金钱成本，是否部署请根据实际需要。 ​ 为了将博客部署到服务器上，需要以下的一系列步骤。 服务器​ 服务器方面主要分为购买服务器和通过SSH协议远程连接至服务器。 购买服务器​ 当我们拥有一台服务器也就意味着拥有一个公网IP，互联网上的人都能够通过此IP来访问我们的博客。 ​ 购买服务器的方式有很多，在国内最常见的便是使用阿里云、华为、腾讯的云服务器。由于博主在之前购买了一台服务器，因此用此台服务器进行演示。 ​ 一般在购买服务器之后，厂商会告诉你服务器的IP地址，端口号(若没有，一般默认是22)，用户名(一般是root)和密码。有了上述信息便可用通过SSH远程连接并控制服务器。 连接服务器​ 有很多软件可以通过SSH的方式连接服务器，这里演示使用Xshell进行连接。 ​ 打开Xshell，点击左上角的新建。 ​ 填入服务器的IP后点击左侧的用户身份验证。 ​ 填入服务器的用户名和密码，最后点击确认即可连接至服务器。 ​ 得到如下结果则说明服务器连接成功。 网页服务器​ 网页服务器(Web Server)的主要功能是提供网上信息浏览的服务。当网页服务器收到一个HTTP请求(他人想要访问博客)，会返回一个HTTP响应，即返回一个HTML页面(博客页面)。因此安装网页服务器是必不可少的。 ​ 主要的网页服务器产品有Kangle、Nginx、Apache。在这里演示Nginx网页服务器部署博客。 下载Nginx​ Nginx是网页服务器，具有占有内存少，稳定性高等优势。拥有网页服务器之后，服务器才能完成提供网页的功能。 ​ 在Xshell的会话框中输入以下代码完成Nginx的下载安装。 1apt-get install nginx ​ 得到如下结果，填入Y回车进入下一步的安装。 ​ 安装完成后可输入以下命令查看Nginx的版本。 1nginx -v ​ 若能出现版本，则说明安装成功。 启动Nginx​ 安装完成之后，在会话中输入以下命令来启动Nginx 1nginx 推送博客内容​ 类似于推送博客内容至GitHub，首先在本地Blog文件夹下执行 hexo g 来生成需要推送的内容。生成完成之后，会在Blog文件夹下创建public文件夹。 ​ 只要将public文件夹下的内容上传至服务器相应路径下，Nginx便能完成博客的搭建。 ​ 上传文件至服务器有很多可行的方法，这里使用最简单的图形化界面传输，避免使用命令操作。 ​ 首先下载Xftp，它和Xshell是同一公司开发的软件，因此操作方法和操作界面相似。 ​ 下载完成之后，同样是先连接至服务器，流程与Xshell的方法相同，这里不再赘述。连接完成之后呈现如下结果。 ​ 其中左边红框标出的为本地电脑的文件内容，右边绿框标出的为服务器的文件内容。在绿框中找到路径 /var/www/html，删去原有的 index.html文件，将红框中public文件夹下的所有文件选中，单击向右传输即可完成上传。 ​ 传输完成之后，在浏览器中输入服务器的IP地址访问博客内容。 使用域名​ 在上述内容中已成功完成了部署，但是可以发现别人若是想访问我们的博客，他需要输入一长串的IP地址，这十分不方便。因此便需要使用域名，并通过DNS（Domain Name System）来将域名和IP地址相互映射，方便我们的访问。 ​ 域名获取的方式有很多，常见的是购买域名。比如namesilo便能以较低的价格获得自己喜欢的域名。在拥有域名之后，如果是国内的服务器最好先备案，不然很容易域名解析失效。 ​ 接下来只要将域名解析到服务器IP即可完成全部工作。由于特殊原因，这里不再演示如何解析，网上有大量的域名解析教程。 可能会遇到的问题‘npm’不是内部或外部命令，也不是可运行的程序或批处理文件原因： 可能环境变量没有配置好 解决方式： 在’此电脑’中右键点击属性 进入系统后点击’高级系统设置中’的环境变量 找到系统变量中的Path，点击进入 找到Noje.js的安装目录，比如这里是C:\\node-v18.12.1-win-x64。则在Path变量中新建一条C:\\node-v18.12.1-win-x64\\。 ‘git’不是内部或外部命令，也不是可运行的程序或批处理文件。原因： 可能环境变量没有配置好 解决方式： 在’此电脑’中右键点击属性 进入系统后点击’高级系统设置中’的环境变量 找到系统变量中的Path，点击进入 找到Git的安装目录中的mingw64文件夹中的bin文件夹，比如这里是C:\\Program Files\\Git\\mingw64\\bin。则在Path变量中新建一条C:\\Program Files\\Git\\mingw64\\bin\\ OpenSSL SSL_read: Connection was reset, errno 10054在运行代码 hexo d时，可能会出现以下的错误。 原因： 服务器的SSL证书没有经过第三方机构的签署 网络不稳定，无法连接至github.com 解决方式： 针对原因1，输入以下代码 1git config --global http.sslVerify &quot;false&quot; 针对原因2，使用vpn或者修改host文件访问GitHub E: Unable to locate package nginx原因： 软件源未更新 解决方式： 输入以下代码完成软件源的更新 1apt-get update 启动Nginx失败​ 在输入命令 nginx 后出现如下错误。 原因： 80端口已经被占用 ​ 输入以下命令 1netstat -natp |grep 80 ​ 发现确实有进程(Apache2)在占用80端口。 解决方式： 输入以下代码杀死该进程 1fuser -k 80/tcp","link":"/2022/12/29/Hexo-install-deploy/"},{"title":"初创博客","text":"开始​ 这是博主的第一篇博客文章，博客的搭建参考B站UP主CodeSheep。 博客意义​ 开创此博客时，博主是一名通信工程的大三学生。刚上大学时，由于学习C语言经常上各种技术网站，发现很多人都拥有自己的博客，便萌生了搭建博客来记录大学生活。但后来便不了了之。 ​ 而现在博主因为变成小阳人（奥密克戎）一直留在学校，闲来无事终于决定搭建自己的博客网站。相信该博客会一直更新下去，目前主要会更新有关课程设计、科研项目和有趣好玩的项目。 ​","link":"/2022/12/25/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"}],"tags":[{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"FPGA","slug":"FPGA","link":"/tags/FPGA/"},{"name":"卷积","slug":"卷积","link":"/tags/%E5%8D%B7%E7%A7%AF/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"博客搭建","slug":"博客搭建","link":"/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"categories":[{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"生活","slug":"生活","link":"/categories/%E7%94%9F%E6%B4%BB/"}],"pages":[]}